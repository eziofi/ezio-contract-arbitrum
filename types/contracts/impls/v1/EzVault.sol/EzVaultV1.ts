/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../../../common";

export declare namespace SwapCollectorUpgradeable {
  export type ParsedQuoteDataStruct = {
    sellToken: PromiseOrValue<string>;
    buyToken: PromiseOrValue<string>;
    sellAmount: PromiseOrValue<BigNumberish>;
    buyAmount: PromiseOrValue<BigNumberish>;
  };

  export type ParsedQuoteDataStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber
  ] & {
    sellToken: string;
    buyToken: string;
    sellAmount: BigNumber;
    buyAmount: BigNumber;
  };
}

export interface EzVaultV1Interface extends utils.Interface {
  functions: {
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GOVERNOR_ROLE()": FunctionFragment;
    "LEVERAGE_DENOMINATOR()": FunctionFragment;
    "MAX_REDEEM_FEE_RATE_A()": FunctionFragment;
    "MAX_REDEEM_FEE_RATE_B()": FunctionFragment;
    "MAX_REWARD_RATE()": FunctionFragment;
    "MAX_STAKE_REWARD_RATE()": FunctionFragment;
    "OPERATOR_ROLE()": FunctionFragment;
    "REDEEM_RATE_DENOMINATOR()": FunctionFragment;
    "REWARD_RATE_DENOMINATOR()": FunctionFragment;
    "aggregatorAction(address)": FunctionFragment;
    "changeList(uint8)": FunctionFragment;
    "check()": FunctionFragment;
    "convertAmt(address,address,uint256)": FunctionFragment;
    "convertDown(uint8,bytes)": FunctionFragment;
    "convertDownPrice()": FunctionFragment;
    "getPrice(address)": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getRoleMember(bytes32,uint256)": FunctionFragment;
    "getRoleMemberCount(bytes32)": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,address,address,address,uint16,uint16,uint16,uint256)": FunctionFragment;
    "interestRate()": FunctionFragment;
    "lastRebaseTime()": FunctionFragment;
    "leverage()": FunctionFragment;
    "matchedA()": FunctionFragment;
    "parseQuoteData(uint8,bytes)": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "pooledA()": FunctionFragment;
    "purchase(uint8,uint8,bytes[])": FunctionFragment;
    "rebase()": FunctionFragment;
    "redeem(uint8,uint8,uint256,address,bytes)": FunctionFragment;
    "redeemFeeRateA()": FunctionFragment;
    "redeemFeeRateB()": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "setAggregators(address,address)": FunctionFragment;
    "setApprove(address,uint8,uint256)": FunctionFragment;
    "setRedeemFeeRateA(uint16,uint256)": FunctionFragment;
    "setRedeemFeeRateB(uint16,uint256)": FunctionFragment;
    "setRewardRate(uint16,uint256)": FunctionFragment;
    "setStakeRewardRate(uint16)": FunctionFragment;
    "stakeRewardRate()": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "tokenAggregators(address)": FunctionFragment;
    "totalCommission()": FunctionFragment;
    "totalNetWorth()": FunctionFragment;
    "totalReserve()": FunctionFragment;
    "unpause()": FunctionFragment;
    "withdraw(uint256,uint8,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DEFAULT_ADMIN_ROLE"
      | "GOVERNOR_ROLE"
      | "LEVERAGE_DENOMINATOR"
      | "MAX_REDEEM_FEE_RATE_A"
      | "MAX_REDEEM_FEE_RATE_B"
      | "MAX_REWARD_RATE"
      | "MAX_STAKE_REWARD_RATE"
      | "OPERATOR_ROLE"
      | "REDEEM_RATE_DENOMINATOR"
      | "REWARD_RATE_DENOMINATOR"
      | "aggregatorAction"
      | "changeList"
      | "check"
      | "convertAmt"
      | "convertDown"
      | "convertDownPrice"
      | "getPrice"
      | "getRoleAdmin"
      | "getRoleMember"
      | "getRoleMemberCount"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "interestRate"
      | "lastRebaseTime"
      | "leverage"
      | "matchedA"
      | "parseQuoteData"
      | "pause"
      | "paused"
      | "pooledA"
      | "purchase"
      | "rebase"
      | "redeem"
      | "redeemFeeRateA"
      | "redeemFeeRateB"
      | "renounceRole"
      | "revokeRole"
      | "rewardRate"
      | "setAggregators"
      | "setApprove"
      | "setRedeemFeeRateA"
      | "setRedeemFeeRateB"
      | "setRewardRate"
      | "setStakeRewardRate"
      | "stakeRewardRate"
      | "supportsInterface"
      | "tokenAggregators"
      | "totalCommission"
      | "totalNetWorth"
      | "totalReserve"
      | "unpause"
      | "withdraw"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "GOVERNOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LEVERAGE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REDEEM_FEE_RATE_A",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REDEEM_FEE_RATE_B",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_REWARD_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "MAX_STAKE_REWARD_RATE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "OPERATOR_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REDEEM_RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "REWARD_RATE_DENOMINATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "aggregatorAction",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "changeList",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "check", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "convertAmt",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDown",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "convertDownPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPrice",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMember",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleMemberCount",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "interestRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastRebaseTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "leverage", values?: undefined): string;
  encodeFunctionData(functionFragment: "matchedA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "parseQuoteData",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(functionFragment: "pooledA", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "purchase",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(functionFragment: "rebase", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "redeem",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFeeRateA",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "redeemFeeRateB",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAggregators",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprove",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemFeeRateA",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRedeemFeeRateB",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRewardRate",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setStakeRewardRate",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeRewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenAggregators",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "totalCommission",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalNetWorth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalReserve",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GOVERNOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LEVERAGE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REDEEM_FEE_RATE_A",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REDEEM_FEE_RATE_B",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_REWARD_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STAKE_REWARD_RATE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "OPERATOR_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REDEEM_RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "REWARD_RATE_DENOMINATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "aggregatorAction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "changeList", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "check", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "convertAmt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "convertDown",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "convertDownPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPrice", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMember",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleMemberCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "interestRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastRebaseTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "leverage", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "matchedA", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "parseQuoteData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pooledA", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "purchase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rebase", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "redeem", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemFeeRateA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "redeemFeeRateB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApprove", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemFeeRateA",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRedeemFeeRateB",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStakeRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeRewardRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokenAggregators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalCommission",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalNetWorth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalReserve",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;

  events: {
    "Change(uint8,uint16,uint256)": EventFragment;
    "ConvertDown(uint256,uint256,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "Paused(address)": EventFragment;
    "Purchase(address,uint8,uint256,uint256)": EventFragment;
    "Redeem(address,uint8,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Change"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ConvertDown"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Purchase"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Redeem"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface ChangeEventObject {
  type_: number;
  value_: number;
  time_: BigNumber;
}
export type ChangeEvent = TypedEvent<
  [number, number, BigNumber],
  ChangeEventObject
>;

export type ChangeEventFilter = TypedEventFilter<ChangeEvent>;

export interface ConvertDownEventObject {
  matchedA_: BigNumber;
  totalNetWorth_: BigNumber;
  time_: BigNumber;
}
export type ConvertDownEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber],
  ConvertDownEventObject
>;

export type ConvertDownEventFilter = TypedEventFilter<ConvertDownEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface PurchaseEventObject {
  account: string;
  type_: number;
  amt_: BigNumber;
  qty_: BigNumber;
}
export type PurchaseEvent = TypedEvent<
  [string, number, BigNumber, BigNumber],
  PurchaseEventObject
>;

export type PurchaseEventFilter = TypedEventFilter<PurchaseEvent>;

export interface RedeemEventObject {
  account: string;
  type_: number;
  qty_: BigNumber;
  amt_: BigNumber;
  commission_: BigNumber;
  totalNetWorth_: BigNumber;
  totalSupply_: BigNumber;
}
export type RedeemEvent = TypedEvent<
  [string, number, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  RedeemEventObject
>;

export type RedeemEventFilter = TypedEventFilter<RedeemEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface EzVaultV1 extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: EzVaultV1Interface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    LEVERAGE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_REDEEM_FEE_RATE_A(overrides?: CallOverrides): Promise<[number]>;

    MAX_REDEEM_FEE_RATE_B(overrides?: CallOverrides): Promise<[number]>;

    MAX_REWARD_RATE(overrides?: CallOverrides): Promise<[number]>;

    MAX_STAKE_REWARD_RATE(overrides?: CallOverrides): Promise<[number]>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<[string]>;

    REDEEM_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    REWARD_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<[BigNumber]>;

    aggregatorAction(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    changeList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { value: number; deadLine: BigNumber }>;

    check(overrides?: CallOverrides): Promise<[boolean]>;

    convertAmt(
      sourceAddress: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    convertDown(
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    convertDownPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPrice(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      stableToken_: PromiseOrValue<string>,
      reserveToken_: PromiseOrValue<string>,
      aToken_: PromiseOrValue<string>,
      bToken_: PromiseOrValue<string>,
      rewardRate_: PromiseOrValue<BigNumberish>,
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      lastRebaseTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    interestRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastRebaseTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    leverage(overrides?: CallOverrides): Promise<[BigNumber]>;

    matchedA(overrides?: CallOverrides): Promise<[BigNumber]>;

    parseQuoteData(
      channel: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<
      [SwapCollectorUpgradeable.ParsedQuoteDataStructOutput] & {
        parsedQuoteData: SwapCollectorUpgradeable.ParsedQuoteDataStructOutput;
      }
    >;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pooledA(overrides?: CallOverrides): Promise<[BigNumber]>;

    purchase(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quotes_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeem(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      qty_: PromiseOrValue<BigNumberish>,
      token_: PromiseOrValue<string>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    redeemFeeRateA(overrides?: CallOverrides): Promise<[number]>;

    redeemFeeRateB(overrides?: CallOverrides): Promise<[number]>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<[number]>;

    setAggregators(
      tokenAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprove(
      token: PromiseOrValue<string>,
      channel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedeemFeeRateA(
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRedeemFeeRateB(
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRewardRate(
      rewardRate_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setStakeRewardRate(
      stakeRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeRewardRate(overrides?: CallOverrides): Promise<[number]>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    tokenAggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    totalCommission(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalNetWorth(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalReserve(overrides?: CallOverrides): Promise<[BigNumber]>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

  LEVERAGE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_REDEEM_FEE_RATE_A(overrides?: CallOverrides): Promise<number>;

  MAX_REDEEM_FEE_RATE_B(overrides?: CallOverrides): Promise<number>;

  MAX_REWARD_RATE(overrides?: CallOverrides): Promise<number>;

  MAX_STAKE_REWARD_RATE(overrides?: CallOverrides): Promise<number>;

  OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

  REDEEM_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  REWARD_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

  aggregatorAction(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  changeList(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<[number, BigNumber] & { value: number; deadLine: BigNumber }>;

  check(overrides?: CallOverrides): Promise<boolean>;

  convertAmt(
    sourceAddress: PromiseOrValue<string>,
    targetAddress: PromiseOrValue<string>,
    sourceAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  convertDown(
    channel_: PromiseOrValue<BigNumberish>,
    quote_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  convertDownPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getPrice(
    tokenAddress: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMember(
    role: PromiseOrValue<BytesLike>,
    index: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRoleMemberCount(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    stableToken_: PromiseOrValue<string>,
    reserveToken_: PromiseOrValue<string>,
    aToken_: PromiseOrValue<string>,
    bToken_: PromiseOrValue<string>,
    rewardRate_: PromiseOrValue<BigNumberish>,
    redeemFeeRateA_: PromiseOrValue<BigNumberish>,
    redeemFeeRateB_: PromiseOrValue<BigNumberish>,
    lastRebaseTime_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  interestRate(overrides?: CallOverrides): Promise<BigNumber>;

  lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

  leverage(overrides?: CallOverrides): Promise<BigNumber>;

  matchedA(overrides?: CallOverrides): Promise<BigNumber>;

  parseQuoteData(
    channel: PromiseOrValue<BigNumberish>,
    quote: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<SwapCollectorUpgradeable.ParsedQuoteDataStructOutput>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pooledA(overrides?: CallOverrides): Promise<BigNumber>;

  purchase(
    type_: PromiseOrValue<BigNumberish>,
    channel_: PromiseOrValue<BigNumberish>,
    quotes_: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rebase(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeem(
    type_: PromiseOrValue<BigNumberish>,
    channel_: PromiseOrValue<BigNumberish>,
    qty_: PromiseOrValue<BigNumberish>,
    token_: PromiseOrValue<string>,
    quote_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  redeemFeeRateA(overrides?: CallOverrides): Promise<number>;

  redeemFeeRateB(overrides?: CallOverrides): Promise<number>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  rewardRate(overrides?: CallOverrides): Promise<number>;

  setAggregators(
    tokenAddress: PromiseOrValue<string>,
    aggregatorAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprove(
    token: PromiseOrValue<string>,
    channel: PromiseOrValue<BigNumberish>,
    amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedeemFeeRateA(
    redeemFeeRateA_: PromiseOrValue<BigNumberish>,
    deadLine_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRedeemFeeRateB(
    redeemFeeRateB_: PromiseOrValue<BigNumberish>,
    deadLine_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRewardRate(
    rewardRate_: PromiseOrValue<BigNumberish>,
    deadLine_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setStakeRewardRate(
    stakeRewardRate_: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeRewardRate(overrides?: CallOverrides): Promise<number>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  tokenAggregators(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  totalCommission(overrides?: CallOverrides): Promise<BigNumber>;

  totalNetWorth(overrides?: CallOverrides): Promise<BigNumber>;

  totalReserve(overrides?: CallOverrides): Promise<BigNumber>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    amount: PromiseOrValue<BigNumberish>,
    channel_: PromiseOrValue<BigNumberish>,
    quote_: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<string>;

    LEVERAGE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REDEEM_FEE_RATE_A(overrides?: CallOverrides): Promise<number>;

    MAX_REDEEM_FEE_RATE_B(overrides?: CallOverrides): Promise<number>;

    MAX_REWARD_RATE(overrides?: CallOverrides): Promise<number>;

    MAX_STAKE_REWARD_RATE(overrides?: CallOverrides): Promise<number>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<string>;

    REDEEM_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    aggregatorAction(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[number, BigNumber] & { value: number; deadLine: BigNumber }>;

    check(overrides?: CallOverrides): Promise<boolean>;

    convertAmt(
      sourceAddress: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertDown(
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    convertDownPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      stableToken_: PromiseOrValue<string>,
      reserveToken_: PromiseOrValue<string>,
      aToken_: PromiseOrValue<string>,
      bToken_: PromiseOrValue<string>,
      rewardRate_: PromiseOrValue<BigNumberish>,
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      lastRebaseTime_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    matchedA(overrides?: CallOverrides): Promise<BigNumber>;

    parseQuoteData(
      channel: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<SwapCollectorUpgradeable.ParsedQuoteDataStructOutput>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pooledA(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quotes_: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    rebase(overrides?: CallOverrides): Promise<void>;

    redeem(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      qty_: PromiseOrValue<BigNumberish>,
      token_: PromiseOrValue<string>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    redeemFeeRateA(overrides?: CallOverrides): Promise<number>;

    redeemFeeRateB(overrides?: CallOverrides): Promise<number>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    rewardRate(overrides?: CallOverrides): Promise<number>;

    setAggregators(
      tokenAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprove(
      token: PromiseOrValue<string>,
      channel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemFeeRateA(
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRedeemFeeRateB(
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRewardRate(
      rewardRate_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setStakeRewardRate(
      stakeRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeRewardRate(overrides?: CallOverrides): Promise<number>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    tokenAggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    totalCommission(overrides?: CallOverrides): Promise<BigNumber>;

    totalNetWorth(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserve(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(overrides?: CallOverrides): Promise<void>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Change(uint8,uint16,uint256)"(
      type_?: PromiseOrValue<BigNumberish> | null,
      value_?: PromiseOrValue<BigNumberish> | null,
      time_?: PromiseOrValue<BigNumberish> | null
    ): ChangeEventFilter;
    Change(
      type_?: PromiseOrValue<BigNumberish> | null,
      value_?: PromiseOrValue<BigNumberish> | null,
      time_?: PromiseOrValue<BigNumberish> | null
    ): ChangeEventFilter;

    "ConvertDown(uint256,uint256,uint256)"(
      matchedA_?: PromiseOrValue<BigNumberish> | null,
      totalNetWorth_?: PromiseOrValue<BigNumberish> | null,
      time_?: PromiseOrValue<BigNumberish> | null
    ): ConvertDownEventFilter;
    ConvertDown(
      matchedA_?: PromiseOrValue<BigNumberish> | null,
      totalNetWorth_?: PromiseOrValue<BigNumberish> | null,
      time_?: PromiseOrValue<BigNumberish> | null
    ): ConvertDownEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Purchase(address,uint8,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      type_?: PromiseOrValue<BigNumberish> | null,
      amt_?: PromiseOrValue<BigNumberish> | null,
      qty_?: null
    ): PurchaseEventFilter;
    Purchase(
      account?: PromiseOrValue<string> | null,
      type_?: PromiseOrValue<BigNumberish> | null,
      amt_?: PromiseOrValue<BigNumberish> | null,
      qty_?: null
    ): PurchaseEventFilter;

    "Redeem(address,uint8,uint256,uint256,uint256,uint256,uint256)"(
      account?: PromiseOrValue<string> | null,
      type_?: PromiseOrValue<BigNumberish> | null,
      qty_?: PromiseOrValue<BigNumberish> | null,
      amt_?: null,
      commission_?: null,
      totalNetWorth_?: null,
      totalSupply_?: null
    ): RedeemEventFilter;
    Redeem(
      account?: PromiseOrValue<string> | null,
      type_?: PromiseOrValue<BigNumberish> | null,
      qty_?: PromiseOrValue<BigNumberish> | null,
      amt_?: null,
      commission_?: null,
      totalNetWorth_?: null,
      totalSupply_?: null
    ): RedeemEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    LEVERAGE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REDEEM_FEE_RATE_A(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REDEEM_FEE_RATE_B(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKE_REWARD_RATE(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    REDEEM_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    REWARD_RATE_DENOMINATOR(overrides?: CallOverrides): Promise<BigNumber>;

    aggregatorAction(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    changeList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    check(overrides?: CallOverrides): Promise<BigNumber>;

    convertAmt(
      sourceAddress: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    convertDown(
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    convertDownPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getPrice(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      stableToken_: PromiseOrValue<string>,
      reserveToken_: PromiseOrValue<string>,
      aToken_: PromiseOrValue<string>,
      bToken_: PromiseOrValue<string>,
      rewardRate_: PromiseOrValue<BigNumberish>,
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      lastRebaseTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    interestRate(overrides?: CallOverrides): Promise<BigNumber>;

    lastRebaseTime(overrides?: CallOverrides): Promise<BigNumber>;

    leverage(overrides?: CallOverrides): Promise<BigNumber>;

    matchedA(overrides?: CallOverrides): Promise<BigNumber>;

    parseQuoteData(
      channel: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pooledA(overrides?: CallOverrides): Promise<BigNumber>;

    purchase(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quotes_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeem(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      qty_: PromiseOrValue<BigNumberish>,
      token_: PromiseOrValue<string>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    redeemFeeRateA(overrides?: CallOverrides): Promise<BigNumber>;

    redeemFeeRateB(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    setAggregators(
      tokenAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprove(
      token: PromiseOrValue<string>,
      channel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedeemFeeRateA(
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRedeemFeeRateB(
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRewardRate(
      rewardRate_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setStakeRewardRate(
      stakeRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeRewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    tokenAggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    totalCommission(overrides?: CallOverrides): Promise<BigNumber>;

    totalNetWorth(overrides?: CallOverrides): Promise<BigNumber>;

    totalReserve(overrides?: CallOverrides): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GOVERNOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LEVERAGE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REDEEM_FEE_RATE_A(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REDEEM_FEE_RATE_B(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    MAX_REWARD_RATE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_STAKE_REWARD_RATE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    OPERATOR_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    REDEEM_RATE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    REWARD_RATE_DENOMINATOR(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    aggregatorAction(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    changeList(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    check(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    convertAmt(
      sourceAddress: PromiseOrValue<string>,
      targetAddress: PromiseOrValue<string>,
      sourceAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    convertDown(
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    convertDownPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPrice(
      tokenAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMember(
      role: PromiseOrValue<BytesLike>,
      index: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRoleMemberCount(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      stableToken_: PromiseOrValue<string>,
      reserveToken_: PromiseOrValue<string>,
      aToken_: PromiseOrValue<string>,
      bToken_: PromiseOrValue<string>,
      rewardRate_: PromiseOrValue<BigNumberish>,
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      lastRebaseTime_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    interestRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastRebaseTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    leverage(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    matchedA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parseQuoteData(
      channel: PromiseOrValue<BigNumberish>,
      quote: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pooledA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    purchase(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quotes_: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rebase(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeem(
      type_: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      qty_: PromiseOrValue<BigNumberish>,
      token_: PromiseOrValue<string>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    redeemFeeRateA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    redeemFeeRateB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAggregators(
      tokenAddress: PromiseOrValue<string>,
      aggregatorAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprove(
      token: PromiseOrValue<string>,
      channel: PromiseOrValue<BigNumberish>,
      amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemFeeRateA(
      redeemFeeRateA_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRedeemFeeRateB(
      redeemFeeRateB_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRewardRate(
      rewardRate_: PromiseOrValue<BigNumberish>,
      deadLine_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setStakeRewardRate(
      stakeRewardRate_: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeRewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    tokenAggregators(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalCommission(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalNetWorth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalReserve(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      amount: PromiseOrValue<BigNumberish>,
      channel_: PromiseOrValue<BigNumberish>,
      quote_: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
