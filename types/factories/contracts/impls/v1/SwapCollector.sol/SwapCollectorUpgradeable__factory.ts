/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../../common";
import type {
  SwapCollectorUpgradeable,
  SwapCollectorUpgradeableInterface,
} from "../../../../../contracts/impls/v1/SwapCollector.sol/SwapCollectorUpgradeable";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint8",
        name: "channel",
        type: "uint8",
      },
      {
        internalType: "bytes",
        name: "quote",
        type: "bytes",
      },
    ],
    name: "parseQuoteData",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "sellToken",
            type: "address",
          },
          {
            internalType: "address",
            name: "buyToken",
            type: "address",
          },
          {
            internalType: "uint256",
            name: "sellAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "buyAmount",
            type: "uint256",
          },
        ],
        internalType: "struct SwapCollectorUpgradeable.ParsedQuoteData",
        name: "parsedQuoteData",
        type: "tuple",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506105ae806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636743944b14610030575b600080fd5b61004361003e36600461033a565b61008d565b604051610084919081516001600160a01b03908116825260208084015190911690820152604080830151908201526060918201519181019190915260800190565b60405180910390f35b6040805160808101825260008082526020820181905291810182905260608101829052906100fb6100c160048386886103c5565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061020f92505050565b90506001600160e01b031981166336e57cb760e01b141561015c5760008080610127866004818a6103c5565b810190610134919061040b565b6001600160a01b03928316885291166020870152604086015250506000606084015250610207565b60ff851661019e576000806000806101748888610216565b6001600160a01b039384168a52929091166020890152604088015260608701525061020792505050565b8460ff16600114156101ba5760008060008061017488886102a6565b60405162461bcd60e51b815260206004820152601e60248201527f53776170436f6c6c6563746f723a2057726f6e6720506172616d65746572000060448201526064015b60405180910390fd5b509392505050565b6020015190565b60008080808061022c6100c1600483898b6103c5565b604080516060810190915260228082529192506001600160e01b03198316630415565b60e41b149161055760208301399061027a5760405162461bcd60e51b81526004016101fe9190610447565b50610288866004818a6103c5565b810190610295919061049c565b929a91995097509095509350505050565b6000808080806102bc6100c1600483898b6103c5565b604080516060810190915260228082529192506001600160e01b031983166312aa3caf60e01b149161055760208301399061030a5760405162461bcd60e51b81526004016101fe9190610447565b50610318866004818a6103c5565b81019061032591906104de565b949d939c509a50929850909650505050505050565b60008060006040848603121561034f57600080fd5b833560ff8116811461036057600080fd5b9250602084013567ffffffffffffffff8082111561037d57600080fd5b818601915086601f83011261039157600080fd5b8135818111156103a057600080fd5b8760208285010111156103b257600080fd5b6020830194508093505050509250925092565b600080858511156103d557600080fd5b838611156103e257600080fd5b5050820193919092039150565b80356001600160a01b038116811461040657600080fd5b919050565b60008060006060848603121561042057600080fd5b610429846103ef565b9250610437602085016103ef565b9150604084013590509250925092565b600060208083528351808285015260005b8181101561047457858101830151858201604001528201610458565b81811115610486576000604083870101525b50601f01601f1916929092016040019392505050565b600080600080608085870312156104b257600080fd5b6104bb856103ef565b93506104c9602086016103ef565b93969395505050506040820135916060013590565b600080600080600080600060e0888a0312156104f957600080fd5b610502886103ef565b9650610510602089016103ef565b955061051e604089016103ef565b945061052c606089016103ef565b935061053a608089016103ef565b925060a0880135915060c088013590509295989194975092955056fe53776170436f6c6c6563746f723a2057726f6e672066756e6374696f6e2063616c6ca26469706673582212207f826390282d31783f0126fb0b5efb2287fa61e004515cd6854b2f03081a11f964736f6c63430008080033";

type SwapCollectorUpgradeableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SwapCollectorUpgradeableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SwapCollectorUpgradeable__factory extends ContractFactory {
  constructor(...args: SwapCollectorUpgradeableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<SwapCollectorUpgradeable> {
    return super.deploy(overrides || {}) as Promise<SwapCollectorUpgradeable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): SwapCollectorUpgradeable {
    return super.attach(address) as SwapCollectorUpgradeable;
  }
  override connect(signer: Signer): SwapCollectorUpgradeable__factory {
    return super.connect(signer) as SwapCollectorUpgradeable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SwapCollectorUpgradeableInterface {
    return new utils.Interface(_abi) as SwapCollectorUpgradeableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SwapCollectorUpgradeable {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SwapCollectorUpgradeable;
  }
}
